AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  test

  Sample SAM Template for Robot Simulator"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 300
Parameters:
  AppStage:
    Type: String
    Default: dev

Resources:

  s3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  WebApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref AppStage

  RobotFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn: lambdaFunctionRole
    Properties:
      CodeUri: robotSimulator/
      Handler: commandParsor.lambda_handler
      Runtime: python3.6
      Role: !GetAtt
          - lambdaFunctionRole
          - Arn
      Environment:
        Variables:
          s3Bucket: !Ref s3Bucket
      Events:
        Upload:
          Type: Api
          Properties:
            Path: /robot
            Method: get
            RestApiId: !Ref WebApi


  lambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamicPipelineMaker
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                 - !GetAtt s3Bucket.Arn
                 - !Sub
                   - ${arn}/*
                   - { arn: !GetAtt s3Bucket.Arn }
Outputs:
  GetRobotApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${WebApi}.execute-api.${AWS::Region}.amazonaws.com/${AppStage}/robot/"
  S3Bucket:
    Description: "S3 Bucket name"
    Value: !Ref s3Bucket
